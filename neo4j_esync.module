<?php

/**
 * @file
 * Contains neo4j_esync.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Component\Serialization\Json;
use GraphAware\Bolt\Exception\IOException;
use GraphAware\Neo4j\Client\Client;
use Psr\Log\LoggerInterface;

/**
 * Implements hook_help().
 */
function neo4j_esync_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the neo4j_esync module.
    case 'help.page.neo4j_esync':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Neo4j Entity Sync') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_insert().
 * @param  EntityInterface $entity A Drupal entity.
 */
function neo4j_esync_entity_insert(EntityInterface $entity) {
  $entity_type = $entity->getEntityType()->id();
  $entity_type_label = $entity->getEntityType()->getLabel();

  $sync_entities = \Drupal::config('neo4j_esync.settings')->get('entities_to_sync');

  if (in_array($entity_type, $sync_entities)) {
    $client = \Drupal::service('neo4j.client');
    $query = "CREATE ({$entity_type}:{$entity_type_label}) SET {$entity_type} += {parameters}";
    $query_params = [
      'parameters' => [
        'name' => $entity->label(),
        'entity_type' => $entity_type,
        'entity_id' => $entity->id(),
        'bundle' => $entity->bundle(),
      ]
    ];

    // Invoke a hook to allow query params to be altered.
    \Drupal::moduleHandler()->invokeAll('neo4j_esync_insert', array($entity_type, &$query_params));

    $client->run($query, $query_params);
  }
}

/**
 * Implements hook_entity_update().
 * @param  EntityInterface $entity A Drupal entity.
 */
function neo4j_esync_entity_update(EntityInterface $entity) {
  $entity_type = $entity->getEntityType()->id();
  $entity_type_label = $entity->getEntityType()->getLabel();

  $sync_entities = \Drupal::config('neo4j_esync.settings')->get('entities_to_sync');

  if (in_array($entity_type, $sync_entities)) {
    $client = \Drupal::service('neo4j.client');
    $query = "MERGE ({$entity_type}:{$entity_type_label} {";
    $query_params = [
      'name' => $entity->label(),
      'entity_type' => $entity_type,
      'entity_id' => $entity->id(),
      'bundle' => $entity->bundle(),
    ];

    // Invoke a hook to allow query params to be altered.
    \Drupal::moduleHandler()->invokeAll('neo4j_esync_update', array($entity_type, &$query_params));

    $max = count($query_params);
    foreach($query_params as $key => $value) {
      $val = Json::encode($value);
      $query .= $key .":{$val}";
      if ($max-- > 1) {
        $query .= ',';
      }
    }
    $query .= "})";

    $client->run($query, $query_params);
  }
}

/**
 * Implements hook_entity_insert().
 * @param  EntityInterface $entity A Drupal entity.
 */
function neo4j_esync_entity_delete(EntityInterface $entity) {
  $entity_type = $entity->getEntityType()->id();
  $entity_type_label = $entity->getEntityType()->getLabel();

  // Maybe not needed to check?
  $sync_entities = \Drupal::config('neo4j_esync.settings')->get('entities_to_sync');
  if (in_array($entity_type, $sync_entities)) {
    $client = \Drupal::service('neo4j.client');
    $query_params = [
      "entity_type" => $entity_type,
      "entity_id" => $entity->id(),
    ];

    // Invoke a hook to allow params to be altered.
    \Drupal::moduleHandler()->invokeAll('neo4j_esync_delete', array($entity_type, &$query_params));

    $max = count($query_params);

    $query = "MATCH (n {";
    foreach($query_params as $key => $value) {
      $val = Json::encode($value);
      $query .= $key .":{$val}";
      if ($max-- > 1) {
        $query .= ',';
      }
    }
    $query .= "}) DETACH DELETE n";

    $client->run($query, $query_params);
  }
}
