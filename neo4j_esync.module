<?php

/**
 * @file
 * Contains neo4j_esync.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Component\Serialization\Json;
use GraphAware\Bolt\Exception\IOException;
use GraphAware\Neo4j\Client\Client;
use Psr\Log\LoggerInterface;
use Adadgio\GraphBundle\ORM\Cypher;

/**
 * Implements hook_help().
 */
function neo4j_esync_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the neo4j_esync module.
    case 'help.page.neo4j_esync':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Neo4j Entity Sync') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_insert().
 * @param  EntityInterface $entity A Drupal entity.
 */
function neo4j_esync_entity_insert(EntityInterface $entity) {
  _neo4j_esync_entity_insert_or_update($entity, 'insert');
}

/**
 * Implements hook_entity_update().
 * @param  EntityInterface $entity A Drupal entity.
 */
function neo4j_esync_entity_update(EntityInterface $entity) {
  _neo4j_esync_entity_insert_or_update($entity, 'update');
}

/**
 * Insert & Update queries are similar, so use this function instead.
 */
function _neo4j_esync_entity_insert_or_update(EntityInterface $entity, String $origin_hook) {
  $entity_type = $entity->getEntityType()->id();
  $entity_type_label = $entity->getEntityType()->getLabel();

  $sync_entities = \Drupal::config('neo4j_esync.settings')->get('entities_to_sync');

  if (in_array($entity_type, $sync_entities)) {
    $client = \Drupal::service('neo4j.client');

    $cypher = (new Cypher());

    $keys = [
      'entity_id' => $entity->id(),
      'entity_type' => $entity_type,
    ];

    // Overridable properties.
    $props_update = [
      'name' => $entity->label(),
      'bundle' => $entity->bundle(),
    ];

    $hook = "neo4j_esync_{$origin_hook}";
    \Drupal::moduleHandler()->invokeAll($hook, array($entity_type, $entity, &$props_update));
    /**
     * @todo: Throw exception if trying to update one of the key fields.
     */
    if (isset($props_update['entity_id']) || isset($props_update['entity_type'])) {
      drupal_set_message($this->t("You cannot update the entity keys."));
    }
    else {
      $query = (new Cypher())
        ->merge('gn', $entity_type_label, $keys)
        ->onCreateSet('gn', $props_update)
        ->onMatchSet('gn', $props_update)
        ->getQuery();

      $client->run($query);
    }
  }
}

/**
 * Implements hook_entity_insert().
 * @param  EntityInterface $entity A Drupal entity.
 */
function neo4j_esync_entity_delete(EntityInterface $entity) {
  $entity_type = $entity->getEntityType()->id();
  $entity_type_label = $entity->getEntityType()->getLabel();

  // Maybe not needed to check?
  $sync_entities = \Drupal::config('neo4j_esync.settings')->get('entities_to_sync');
  if (in_array($entity_type, $sync_entities)) {

    $client = \Drupal::service('neo4j.client');
    $keys = [
      "entity_type" => $entity_type,
      "entity_id" => $entity->id(),
    ];

    $query = (new Cypher())
      ->match('gn', $entity_type_label, $keys)
      ->getQuery() . " DETACH DELETE gn";

    $client->run($query);

  }
}
